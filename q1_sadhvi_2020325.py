s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)


round_constants = bytearray([0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36])

def get_hex(value):
    str = value.encode('utf-8')
    hex_str = str.hex()
    return hex_str

# word: [int], returns bytes
def substitute_word(word):
    substituted_word = []
    for i in word:
        substituted_word.append((s_box[i]))
    substituted_word = bytes(substituted_word)
    return substituted_word

# r: int --> bytes
def calc_rcon(r: int):
    rc = []
    rc_val = round_constants[r-1]
    rc.append(rc_val)
    # for AES-128, the last three rc bits are 0
    for i in range(3):
        rc.append(0)
    rcon_value = bytes(rc)
    return rcon_value

# a: bytes, b: bytes
def xor_bytes(a,b):
    xor = []
    x = zip(a,b)
    for (c,d) in x:
        xor.append(c^d)
    return bytes(xor)


def rotate_left(word, by):
    new_lis = word[by:]+ word[0:by]
    return new_lis

def matrix_from_bytes(text):
    "converts byte array to 4 * 4 matrix"
    a = []
    for i in range(0, len(text), 4):
        a.append(list(text[i:i+4]))
    return a

def bytes_from_matrix(state):
    """ Converts a 4x4 matrix into a 16-byte array.  """
    return bytes(sum(state, []))

def g_fun(word, by, rcon):
    w_new = substitute_word(rotate_left(word,by))
    return xor_bytes(w_new, rcon)

#Key : bytes
# key gen algo
def key_generation(key):
    w = matrix_from_bytes(key)
    # first 4 words generated, next 40 to be generated.
    for i in range(40):
        temp = w[i-1]
        if i % 4 == 0: 
            rcon = calc_rcon(int(i / 4))
            temp = (g_fun(temp, 1, rcon))  # calculate the new prev w, for ex w4 = w1 xor g(w3)
        corresponding_word = w[i-4]
        w.append(xor_bytes(corresponding_word, temp)) # other w's are say w5 = w4(prev w) XOR w[(i-4) = 1 = corresponfing word]

    # divide into list of list where each sub list is 4 length
    nw = []
    for i in range(int(len(w)/4)):
        start = 4*i
        end = 4*(i+1)
        s = []
        for j in range(start, end):
            s.append(w[j])
        nw.append(s)
    return nw



def add_round_key(matrix, key_schedule, round):
    round_key = key_schedule[round]
    for i in range(4):
        for j in range(4):
            matrix[i][j] = matrix[i][j] ^ round_key[i][j]


def sub_bytes(s):
    for i in range(4):
        for j in range(4):
            s[i][j] = s_box[s[i][j]]

def shift_rows(s):
    s[0][1], s[1][1], s[2][1], s[3][1] = s[1][1], s[2][1], s[3][1], s[0][1]
    s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
    s[0][3], s[1][3], s[2][3], s[3][3] = s[3][3], s[0][3], s[1][3], s[2][3]


def xtime(a):
    if a & 0x80: 
        a = a << 1
        a = a ^ 0x1B
    else:
        a = a << 1
    return a & 0xFF

def xor_cols(a,b):
    return a^b

def mix_column(col):
    all_xor = col[0] ^ col[1] ^ col[2] ^ col[3]
    c_0 = col[0]
    col[0] = xor_cols(col[0] , all_xor) ^ xtime(xor_cols(col[0] , col[1]))
    col[1] = xor_cols(col[1] , all_xor) ^ xtime(xor_cols(col[1] , col[2]))
    col[2] = xor_cols(col[2] , all_xor) ^ xtime(xor_cols(col[2] , col[3]))
    col[3] = xor_cols(col[3] , all_xor )^ xtime(xor_cols(c_0 , col[3]))


def mix_columns(s):
    for r in s:
        mix_column(r)

def inv_shift_rows(s):
    # [00, 10, 20, 30]     [00, 10, 20, 30]
    # [01, 11, 21, 31] <-- [11, 21, 31, 01]
    # [02, 12, 22, 32]     [22, 32, 02, 12]
    # [03, 13, 23, 33]     [33, 03, 13, 23]
    s[1][1], s[2][1], s[3][1], s[0][1] = s[0][1], s[1][1], s[2][1], s[3][1]
    s[2][2], s[3][2], s[0][2], s[1][2] = s[0][2], s[1][2], s[2][2], s[3][2]
    s[3][3], s[0][3], s[1][3], s[2][3] = s[0][3], s[1][3], s[2][3], s[3][3]


def inv_sub_bytes(s):
    for i in range(4):
        for j in range(4):
            s[i][j] = inv_s_box[s[i][j]]



def inv_mix_cols(s):
    for col in s:
        u = xtime(xtime(xor_cols(col[0] , col[2])))
        v = xtime(xtime(xor_cols(col[1] , col[3])))
        col[0] = xor_cols(col[0], u)
        col[1] = xor_cols(col[1], v)
        col[2] = xor_cols(col[2], u)
        col[3] = xor_cols(col[3], v)
    mix_columns(s)


def encrypt(plaintext: str, key: str):

    data = bytearray.fromhex(get_hex(plaintext))
    key = bytearray.fromhex(get_hex(key))
    matrix = matrix_from_bytes(data)

    key_schedule = key_generation(key)

    add_round_key(matrix, key_schedule, round=0)
    # print('Matrix after initial round key added:')
    # print(bytes_from_matrix(matrix).hex())

    for round in range(1, 10):
        sub_bytes(matrix)
        shift_rows(matrix)
        mix_columns(matrix)
        add_round_key(matrix, key_schedule, round)
        if round == 1 or round == 9:
            print("\n Matrix after {} th round of encrpyt: ".format(round))
            print(bytes_from_matrix(matrix).hex())

    sub_bytes(matrix)
    shift_rows(matrix)
    add_round_key(matrix, key_schedule, round=10)
    print()

    cipher = bytes_from_matrix(matrix)
    ciphertext_decoded = cipher.hex()
    return ciphertext_decoded


def decrypt(cipher: str, key: str):

    cipher = bytearray.fromhex(cipher)
    key = bytearray.fromhex(get_hex(key))

    matrix = matrix_from_bytes(cipher)
    key_schedule = key_generation(key)
    add_round_key(matrix, key_schedule, round=10)
    inv_shift_rows(matrix)
    inv_sub_bytes(matrix)
    print("\n Matrix after 1st round of decrypt:")
    print(bytes_from_matrix(matrix).hex())

    for round in range(9, 0, -1):
        add_round_key(matrix, key_schedule, round)
        inv_mix_cols(matrix)
        inv_shift_rows(matrix)
        inv_sub_bytes(matrix)
        if round == 2: 
            # This is 9th round bcoz we first did the 3 step round above(rnd 1) the for loop and then in this loop we have
            # done calculations 9 - 2 + 1 = 8 times, so 1 + 8 = 9 th round.
            print("\n Matrix after 9th round of decrypt:")
            print(bytes_from_matrix(matrix).hex())


    add_round_key(matrix, key_schedule, round=0)

    plain = bytes_from_matrix(matrix)
    return plain.decode()

def main():
    # key = "ABCDabcd12344321"
    # plaintext = "Two One Nine Two"
    key = input("Enter key: ")
    plaintext = input("Enter text: ")

    ciphertext_decoded = encrypt(plaintext, key)
    print("\n Hexadecimal encoded ciphertext: " + str(ciphertext_decoded))
   
    decrypted_text = decrypt(ciphertext_decoded, key)
    print("\n Decrypted cyphertext:" + str(decrypted_text) )
    print("\n")
    if (decrypted_text != plaintext):
        raise Exception("Not equal")
    

if __name__ == "__main__":
    main()


   